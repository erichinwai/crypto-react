{"ast":null,"code":"'use strict'; // return a string with the provided number formatted with commas.\n// can specify either a Number or a String.\n\nfunction commaNumber(inputNumber, optionalSeparator, optionalDecimalChar) {\n  // we'll strip off and hold the decimal value to reattach later.\n  // we'll hold both the `number` value and `stringNumber` value.\n  let number, stringNumber, decimal; // default `separator` is a comma\n\n  const separator = optionalSeparator || ','; // default `decimalChar` is a period\n\n  const decimalChar = optionalDecimalChar || '.';\n\n  switch (typeof inputNumber) {\n    case 'string':\n      // if there aren't enough digits to need separators then return it\n      // NOTE: some numbers which are too small will get passed this\n      //       when they have decimal values which make them too long here.\n      //       but, the number value check after this switch will catch it.\n      if (inputNumber.length < (inputNumber[0] === '-' ? 5 : 4)) {\n        return inputNumber;\n      } // remember it as a string in `stringNumber` and convert to a Number\n\n\n      stringNumber = inputNumber; // if they're not using the Node standard decimal char then replace it\n      // before converting.\n\n      number = decimalChar !== '.' ? Number(stringNumber.replace(decimalChar, '.')) : Number(stringNumber);\n      break;\n    // convert to a string.\n    // NOTE: don't check if the number is too small before converting\n    //       because we'll need to return `stringNumber` anyway.\n\n    case 'number':\n      stringNumber = String(inputNumber);\n      number = inputNumber;\n      break;\n    // return invalid type as-is\n\n    default:\n      return inputNumber;\n  } // when it doesn't need a separator or isn't a number then return it\n\n\n  if (-1000 < number && number < 1000 || isNaN(number) || !isFinite(number)) {\n    return stringNumber;\n  } // strip off decimal value to append to the final result at the bottom\n\n\n  let decimalIndex = stringNumber.lastIndexOf(decimalChar);\n\n  if (decimalIndex > -1) {\n    decimal = stringNumber.slice(decimalIndex);\n    stringNumber = stringNumber.slice(0, -decimal.length);\n  } // else {\n  //   decimal = null\n  // }\n  // finally, parse the string and add in separators\n\n\n  stringNumber = parse(stringNumber, separator); // if there's a decimal value add it back on the end.\n  // NOTE: we sliced() it off including the decimalChar, so it's good.\n\n  return decimal ? stringNumber + decimal : stringNumber;\n}\n\nfunction parse(stringNumber, separator) {\n  // below here we split the number at spots to add a separator.\n  // then, combine it with the separator and add decimal value (if exists)\n  const start = stringNumber[0] === '-' ? 1 : 0; // start after minus sign\n\n  const count = stringNumber.length - start - 1; // count digits after first\n\n  let i = count % 3 + 1 + start; // index for first separator\n\n  const strings = [// hold string parts\n  // grab string content before where the first separator belongs\n  stringNumber.slice(0, i)]; // split remaining string in groups of 3 where a separator belongs\n\n  while (i < stringNumber.length) {\n    strings.push(stringNumber.substr(i, 3));\n    i += 3;\n  } // finally, combine groups with the separator\n\n\n  return strings.join(separator);\n} // convenience function for currying style:\n//   const format = commaNumber.bindWith(',', '.')\n\n\nfunction bindWith(separator, decimalChar) {\n  return function (number) {\n    return commaNumber(number, separator, decimalChar);\n  };\n}\n\nmodule.exports = commaNumber;\nmodule.exports.bindWith = bindWith;","map":{"version":3,"sources":["C:/Users/Hin Wai/my-app/node_modules/comma-number/lib/index.js"],"names":["commaNumber","inputNumber","optionalSeparator","optionalDecimalChar","number","stringNumber","decimal","separator","decimalChar","length","Number","replace","String","isNaN","isFinite","decimalIndex","lastIndexOf","slice","parse","start","count","i","strings","push","substr","join","bindWith","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// return a string with the provided number formatted with commas.\n// can specify either a Number or a String.\nfunction commaNumber(inputNumber, optionalSeparator, optionalDecimalChar) {\n\n  // we'll strip off and hold the decimal value to reattach later.\n  // we'll hold both the `number` value and `stringNumber` value.\n  let number, stringNumber, decimal\n\n  // default `separator` is a comma\n  const separator = optionalSeparator   || ','\n\n  // default `decimalChar` is a period\n  const decimalChar = optionalDecimalChar || '.'\n\n  switch (typeof inputNumber) {\n\n    case 'string':\n\n      // if there aren't enough digits to need separators then return it\n      // NOTE: some numbers which are too small will get passed this\n      //       when they have decimal values which make them too long here.\n      //       but, the number value check after this switch will catch it.\n      if (inputNumber.length < (inputNumber[0] === '-' ? 5 : 4)) {\n        return inputNumber\n      }\n\n      // remember it as a string in `stringNumber` and convert to a Number\n      stringNumber = inputNumber\n\n      // if they're not using the Node standard decimal char then replace it\n      // before converting.\n      number = decimalChar !== '.' ? Number(stringNumber.replace(decimalChar, '.'))\n                                   : Number(stringNumber)\n      break\n\n    // convert to a string.\n    // NOTE: don't check if the number is too small before converting\n    //       because we'll need to return `stringNumber` anyway.\n    case 'number':\n      stringNumber = String(inputNumber)\n      number       = inputNumber\n      break\n\n    // return invalid type as-is\n    default: return inputNumber\n  }\n\n  // when it doesn't need a separator or isn't a number then return it\n  if ((-1000 < number && number < 1000) || isNaN(number) || !isFinite(number)) {\n    return stringNumber\n  }\n\n  // strip off decimal value to append to the final result at the bottom\n  let decimalIndex = stringNumber.lastIndexOf(decimalChar)\n\n  if (decimalIndex > -1) {\n    decimal = stringNumber.slice(decimalIndex)\n    stringNumber = stringNumber.slice(0, -decimal.length)\n  }\n\n  // else {\n  //   decimal = null\n  // }\n\n  // finally, parse the string and add in separators\n  stringNumber = parse(stringNumber, separator)\n\n  // if there's a decimal value add it back on the end.\n  // NOTE: we sliced() it off including the decimalChar, so it's good.\n  return decimal ? stringNumber + decimal : stringNumber\n\n}\n\n\nfunction parse(stringNumber, separator) {\n\n  // below here we split the number at spots to add a separator.\n  // then, combine it with the separator and add decimal value (if exists)\n\n  const start = stringNumber[0] === '-' ? 1 : 0  // start after minus sign\n  const count = stringNumber.length - start - 1  // count digits after first\n  let i = (count % 3) + 1 + start                // index for first separator\n  const strings = [                              // hold string parts\n    // grab string content before where the first separator belongs\n    stringNumber.slice(0, i)\n  ]\n\n  // split remaining string in groups of 3 where a separator belongs\n  while (i < stringNumber.length) {\n    strings.push(stringNumber.substr(i, 3))\n    i += 3\n  }\n\n  // finally, combine groups with the separator\n  return strings.join(separator)\n}\n\n\n// convenience function for currying style:\n//   const format = commaNumber.bindWith(',', '.')\nfunction bindWith(separator, decimalChar) {\n  return function(number) {\n    return commaNumber(number, separator, decimalChar)\n  }\n}\n\nmodule.exports = commaNumber\nmodule.exports.bindWith = bindWith\n"]},"metadata":{},"sourceType":"script"}