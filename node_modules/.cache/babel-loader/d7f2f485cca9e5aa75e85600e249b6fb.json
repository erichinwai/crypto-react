{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Hin Wai\\\\my-app\\\\src\\\\components\\\\CryptoTable1.js\",\n    _s = $RefreshSig$();\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { useSortBy, useTable } from 'react-table';\n\nfunction CryptoTable1({\n  columns,\n  data\n}) {\n  _s();\n\n  const {\n    getTableProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, useSortBy);\n  return /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(TableHead, {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(TableRow, { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(TableCell, { ...column.getHeaderProps(column.getSortByToggleProps()),\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: column.isSorted ? column.isSortedDesc ? ' ðŸ”½' : ' ðŸ”¼' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(TableRow, { ...row.getRowProps(),\n          children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(TableCell, { ...cell.getCellProps(),\n            children: cell.render('Cell')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CryptoTable1, \"3F4uCistoKLnHgvu4MN377ACems=\", false, function () {\n  return [useTable];\n});\n\n_c = CryptoTable1;\nexport default CryptoTable1;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoTable1\");","map":{"version":3,"sources":["C:/Users/Hin Wai/my-app/src/components/CryptoTable1.js"],"names":["Table","TableBody","TableCell","TableHead","TableRow","useSortBy","useTable","CryptoTable1","columns","data","getTableProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,aAApC;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAtB,EAAyC;AAAA;;AACvC,QAAM;AACJC,IAAAA,aADI;AACWC,IAAAA,YADX;AACyBC,IAAAA,IADzB;AAC+BC,IAAAA;AAD/B,MAEFP,QAAQ,CAAC;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAD,EAAoBJ,SAApB,CAFZ;AAIA,sBACE,QAAC,KAAD,OAAWK,aAAa,EAAxB;AAAA,4BACE,QAAC,SAAD;AAAA,gBACGC,YAAY,CAACG,GAAb,CAAiBC,WAAW,iBAC3B,QAAC,QAAD,OAAcA,WAAW,CAACC,mBAAZ,EAAd;AAAA,kBACGD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAwBI,MAAM,iBAC7B,QAAC,SAAD,OAAeA,MAAM,CAACC,cAAP,CAAsBD,MAAM,CAACE,oBAAP,EAAtB,CAAf;AAAA,kCACE;AAAA,sBAAIF,MAAM,CAACG,MAAP,CAAc,QAAd;AAAJ;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBACGH,MAAM,CAACI,QAAP,GACGJ,MAAM,CAACK,YAAP,GACE,KADF,GAEE,KAHL,GAIG;AALN;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAmBE,QAAC,SAAD;AAAA,gBACGX,IAAI,CAACE,GAAL,CAASU,GAAG,IAAI;AACfX,QAAAA,UAAU,CAACW,GAAD,CAAV;AACA,4BACE,QAAC,QAAD,OAAcA,GAAG,CAACC,WAAJ,EAAd;AAAA,oBACGD,GAAG,CAACE,KAAJ,CAAUZ,GAAV,CAAca,IAAI,iBACjB,QAAC,SAAD,OAAeA,IAAI,CAACC,YAAL,EAAf;AAAA,sBACGD,IAAI,CAACN,MAAL,CAAY,MAAZ;AADH;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADF;AASD,OAXA;AADH;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD;;GAzCQd,Y;UAGHD,Q;;;KAHGC,Y;AA2CT,eAAeA,YAAf","sourcesContent":["import Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { useSortBy, useTable } from 'react-table';\r\n\r\nfunction CryptoTable1({ columns, data }) {\r\n  const {\r\n    getTableProps, headerGroups, rows, prepareRow,\r\n  } = useTable({ columns, data }, useSortBy);\r\n\r\n  return (\r\n    <Table {...getTableProps()}>\r\n      <TableHead>\r\n        {headerGroups.map(headerGroup => (\r\n          <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <TableCell {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                <b>{column.render('Header')}</b>\r\n                <span>\r\n                  {column.isSorted\r\n                    ? column.isSortedDesc\r\n                      ? ' ðŸ”½'\r\n                      : ' ðŸ”¼'\r\n                    : ''}\r\n                </span>\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        ))}\r\n      </TableHead>\r\n      <TableBody>\r\n        {rows.map(row => {\r\n          prepareRow(row);\r\n          return (\r\n            <TableRow {...row.getRowProps()}>\r\n              {row.cells.map(cell => (\r\n                <TableCell {...cell.getCellProps()}>\r\n                  {cell.render('Cell')}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          );\r\n        })}\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default CryptoTable1;"]},"metadata":{},"sourceType":"module"}