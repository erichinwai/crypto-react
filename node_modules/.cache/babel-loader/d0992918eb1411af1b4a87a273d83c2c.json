{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hin Wai\\\\my-app\\\\src\\\\components\\\\crypto_list.component.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { COLUMNS } from './columns';\nimport './table.css';\nimport { useTable } from 'react-table';\nimport Cryptotable from './cryptotable'; //import '../../node_modules/font-awesome/css/font-awesome.min.css'; \n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSort, faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons';\nconst sortTypes = {\n  up: {\n    icon: faSortUp,\n    fn: (a, b) => a.Market_Cap - b.Market_Cap ? 1 : -1\n  },\n  down: {\n    icon: faSortDown,\n    fn: (a, b) => b.Market_Cap - a.Market_Cap ? -1 : 1\n  },\n  default: {\n    icon: faSort,\n    fn: (a, b) => a\n  }\n};\nexport default class CryptoList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onSortChange = () => {\n      const currentSort = this.state.currentSort;\n      console.log(this.state.currentSort);\n      console.log(currentSort);\n      let nextSort;\n      if (currentSort === 'down') nextSort = 'up';else if (currentSort === 'up') nextSort = 'default';else if (currentSort === 'default') nextSort = 'down';\n      console.log(nextSort);\n      this.setState({\n        currentSort: nextSort\n      });\n    };\n\n    this.state = {\n      cryptos: [],\n      cur: [],\n      test: [],\n      dat: new Date(),\n      high: 0,\n      low: 0,\n      vol: '',\n      mark: '',\n      sortDirection: 'asc',\n      selectedHeaderIndex: 0,\n      currentSort: 'default' //setCryptos:[],\n      //lastFetchDate:new Date(),\n      //setLastFetchDate:new Date(),\n      //searchTerm:'', setSearchTerm:''\n\n    };\n\n    this.ascComparator = (row1, row2) => row1[this.state.selectedHeaderIndex].localeCompare(row2[this.state.selectedHeaderIndex]);\n\n    this.descComparator = (row1, row2) => row2[this.state.selectedHeaderIndex].localeCompare(row1[this.state.selectedHeaderIndex]);\n\n    this.flipSortDirection = () => this.state.sortDirection === \"asc\" ? \"desc\" : \"asc\";\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/crypto/').then(response => {\n      const cryptos = response.data;\n      this.setState({\n        cryptos: cryptos,\n        //headers: cryptos[0]\n        //test: cryptos.map(name=>name.currency),\n        cur: cryptos.Currency,\n        dat: new Date(cryptos.Date),\n        high: cryptos.High,\n        low: cryptos.Low,\n        vol: cryptos.Volumn,\n        mark: cryptos.Market_Cap\n      });\n      console.log(response.data[0]); //return response.data\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  cryptoList() {\n    return this.state.cryptos.map(currentcrypto => {\n      return /*#__PURE__*/_jsxDEV(Cryptotable, {\n        crypto: currentcrypto\n      }, currentcrypto._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 16\n      }, this);\n    });\n  }\n\n  render() {\n    console.log(this.state.cryptos); //tezos\n\n    console.log(this.props.cryptos);\n    console.log(this.state.currentSort);\n    console.log(sortTypes[this.state.currentSort].fn);\n    const table = {\n      headers: [\"Currency\", \"High\", \"Low\", \"Volumn\", \"Market_Cap\"],\n      rows: [[this.state.cryptos.cur], [this.state.cryptos.high], [this.state.cryptos.low], [this.state.cryptos.vol], [this.state.cryptos.mark]]\n    };\n    const {\n      headers,\n      rows\n    } = this.props.table; //const headers = this.props.table;\n    //const rows = this.state.rows;\n\n    const comparator = this.state.sortDirection === \"asc\" ? this.ascComparator : this.descComparator;\n    const sortedRows = rows.sort(comparator);\n    const data = this.state.cryptos;\n    const currentSort = this.state.currentSort;\n    console.log(data);\n    console.log(currentSort);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Crypto Currency Historial\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"thead-light\",\n          children: headers.map((header, i) => /*#__PURE__*/_jsxDEV(\"th\", {\n            onClick: () => {\n              this.setState({\n                // if we clicked on the already selected index, we flip the sort direction\n                sortDirection: this.state.selectedHeaderIndex === i ? this.flipSortDirection() : \"asc\",\n                selectedHeaderIndex: i\n              });\n            },\n            children: header\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: sortedRows.map(row => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map(cell => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: cell\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/*<tr>\r\n                \r\n                <th>Currency</th>\r\n                <th>High</th>\r\n                <th>Low</th>\r\n                <th>Volumn</th>\r\n                <th>MarketCap\r\n                <button onClick={this.onSortChange}>\r\n                  <FontAwesomeIcon icon={sortTypes[(currentSort)].icon} />\r\n                </button>\r\n                </th>\r\n              </tr>*/\n\n/*{[...data].sort(sortTypes[(this.state.currentSort)].fn).map(p=>(\r\n                <tr>\r\n                  <td>{p.Currency}</td>\r\n                  <td>{p.High}</td>\r\n                  <td>{p.Low}</td>\r\n                  <td>{p.Volume}</td>\r\n                  <td>{p.Market_Cap}</td>\r\n                </tr>\r\n              )\r\n              )}*/\n\n/*{headers.map((header, i) => (\r\n                <th\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      // if we clicked on the already selected index, we flip the sort direction\r\n                      sortDirection:\r\n                        this.state.selectedHeaderIndex === i\r\n                          ? this.flipSortDirection()\r\n                          : \"asc\",\r\n                      selectedHeaderIndex: i\r\n                    });\r\n                  }}\r\n                >\r\n                  {header}\r\n                </th>\r\n              ))}*/\n\n/*{sortedRows.map(row => (\r\n                <tr>\r\n                  {row.map(cell => (\r\n                    <td>{cell}</td>\r\n                  ))}\r\n                </tr>\r\n              ))}*/","map":{"version":3,"sources":["C:/Users/Hin Wai/my-app/src/components/crypto_list.component.js"],"names":["React","Component","axios","COLUMNS","useTable","Cryptotable","FontAwesomeIcon","faSort","faSortDown","faSortUp","sortTypes","up","icon","fn","a","b","Market_Cap","down","default","CryptoList","constructor","props","onSortChange","currentSort","state","console","log","nextSort","setState","cryptos","cur","test","dat","Date","high","low","vol","mark","sortDirection","selectedHeaderIndex","ascComparator","row1","row2","localeCompare","descComparator","flipSortDirection","componentDidMount","get","then","response","data","Currency","High","Low","Volumn","catch","error","cryptoList","map","currentcrypto","_id","render","table","headers","rows","comparator","sortedRows","sort","header","i","row","cell"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {COLUMNS} from './columns';\r\nimport './table.css';\r\nimport {useTable} from 'react-table';\r\nimport Cryptotable from './cryptotable';\r\n//import '../../node_modules/font-awesome/css/font-awesome.min.css'; \r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSort, faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\nconst sortTypes = {\r\n  up: {\r\n      icon: faSortUp,\r\n      fn: (a, b) => a.Market_Cap - b.Market_Cap ?1:-1\r\n  },\r\n  down: {\r\n      icon: faSortDown,\r\n      fn: (a, b) => b.Market_Cap - a.Market_Cap ?-1:1\r\n  },\r\n  default: {\r\n      icon: faSort,\r\n      fn: (a, b) => a\r\n  }\r\n};\r\n\r\n\r\nexport default class CryptoList extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      cryptos: [],\r\n      cur:[],\r\n      test:[],\r\n      dat: new Date(),\r\n      high:0,\r\n      low:0,\r\n      vol:'',\r\n      mark:'',\r\n      sortDirection:'asc', \r\n      selectedHeaderIndex:0,\r\n      currentSort: 'default',\r\n      \r\n      //setCryptos:[],\r\n      //lastFetchDate:new Date(),\r\n      //setLastFetchDate:new Date(),\r\n      //searchTerm:'', setSearchTerm:''\r\n    };\r\n    \r\n    \r\n    this.ascComparator = (row1, row2) =>\r\n      row1[this.state.selectedHeaderIndex].localeCompare(\r\n        row2[this.state.selectedHeaderIndex]\r\n      );\r\n\r\n    this.descComparator = (row1, row2) =>\r\n      row2[this.state.selectedHeaderIndex].localeCompare(\r\n        row1[this.state.selectedHeaderIndex]\r\n      );\r\n\r\n    this.flipSortDirection = () =>\r\n      this.state.sortDirection === \"asc\" ? \"desc\" : \"asc\";\r\n      \r\n  }\r\n\r\n  componentDidMount(){\r\n    axios.get('http://localhost:5000/crypto/')\r\n    .then(response =>{\r\n      const cryptos = response.data;\r\n        this.setState({ cryptos: cryptos, \r\n          //headers: cryptos[0]\r\n          //test: cryptos.map(name=>name.currency),\r\n        cur:cryptos.Currency,\r\n        dat: new Date(cryptos.Date),\r\n        high:cryptos.High,\r\n        low:cryptos.Low,\r\n        vol:cryptos.Volumn,\r\n        mark:cryptos.Market_Cap,\r\n\r\n      });\r\n        console.log(response.data[0]);\r\n        //return response.data\r\n    })\r\n    .catch((error)=>{\r\n        console.log(error);\r\n    })\r\n\r\n    \r\n  }\r\n  \r\n  cryptoList(){\r\n    return this.state.cryptos.map(currentcrypto =>{\r\n        return <Cryptotable crypto={currentcrypto} key={currentcrypto._id}/>;\r\n    })\r\n  }\r\n  \r\n  onSortChange = () => {\r\n    const currentSort = this.state.currentSort;\r\n    console.log(this.state.currentSort);\r\n    console.log(currentSort);\r\n    let nextSort;\r\n\r\n    if (currentSort === 'down') nextSort = 'up';\r\n    else if (currentSort === 'up') nextSort = 'default';\r\n    else if (currentSort === 'default') nextSort = 'down';\r\n    console.log(nextSort);\r\n    this.setState({\r\n        currentSort: nextSort\r\n    });\r\n  };\r\n\r\n  \r\n\r\n  render(){\r\n    console.log(this.state.cryptos);//tezos\r\n    console.log(this.props.cryptos); \r\n    console.log(this.state.currentSort);\r\n    console.log(sortTypes[(this.state.currentSort)].fn);\r\n    const table = {\r\n      headers:[\"Currency\", \"High\", \"Low\", \"Volumn\", \"Market_Cap\"],\r\n      rows:[[this.state.cryptos.cur], \r\n            [this.state.cryptos.high],\r\n            [this.state.cryptos.low],\r\n            [this.state.cryptos.vol],\r\n            [this.state.cryptos.mark],\r\n            ]\r\n    };\r\n    \r\n    const {headers, rows } = this.props.table;\r\n   \r\n    //const headers = this.props.table;\r\n    //const rows = this.state.rows;\r\n    const comparator =\r\n      this.state.sortDirection === \"asc\"\r\n        ? this.ascComparator\r\n        : this.descComparator;\r\n    const sortedRows = rows.sort(comparator);\r\n\r\n    const data = this.state.cryptos;\r\n    const currentSort = this.state.currentSort;\r\n    console.log(data);\r\n    console.log(currentSort)\r\n\r\n    return(\r\n      \r\n      <div>\r\n          <h2>Crypto Currency Historial</h2>\r\n          <table className=\"table\">\r\n              <thead className=\"thead-light\">\r\n              {headers.map((header, i) => (\r\n                <th\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      // if we clicked on the already selected index, we flip the sort direction\r\n                      sortDirection:\r\n                        this.state.selectedHeaderIndex === i\r\n                          ? this.flipSortDirection()\r\n                          : \"asc\",\r\n                      selectedHeaderIndex: i\r\n                    });\r\n                  }}\r\n                >\r\n                  {header}\r\n                </th>\r\n              ))}\r\n              </thead>\r\n              <tbody>\r\n              {sortedRows.map(row => (\r\n                  <tr>\r\n                    {row.map(cell => (\r\n                      <td>{cell}</td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n                       \r\n              </tbody>\r\n          </table>\r\n      </div>\r\n  )\r\n    }\r\n  }\r\n  /*<tr>\r\n                  \r\n                  <th>Currency</th>\r\n                  <th>High</th>\r\n                  <th>Low</th>\r\n                  <th>Volumn</th>\r\n                  <th>MarketCap\r\n                  <button onClick={this.onSortChange}>\r\n                    <FontAwesomeIcon icon={sortTypes[(currentSort)].icon} />\r\n                  </button>\r\n                  </th>\r\n                </tr>*/\r\n  /*{[...data].sort(sortTypes[(this.state.currentSort)].fn).map(p=>(\r\n                  <tr>\r\n                    <td>{p.Currency}</td>\r\n                    <td>{p.High}</td>\r\n                    <td>{p.Low}</td>\r\n                    <td>{p.Volume}</td>\r\n                    <td>{p.Market_Cap}</td>\r\n                  </tr>\r\n                )\r\n                )}*/\r\n/*{headers.map((header, i) => (\r\n                <th\r\n                  onClick={() => {\r\n                    this.setState({\r\n                      // if we clicked on the already selected index, we flip the sort direction\r\n                      sortDirection:\r\n                        this.state.selectedHeaderIndex === i\r\n                          ? this.flipSortDirection()\r\n                          : \"asc\",\r\n                      selectedHeaderIndex: i\r\n                    });\r\n                  }}\r\n                >\r\n                  {header}\r\n                </th>\r\n              ))}*/\r\n  /*{sortedRows.map(row => (\r\n                  <tr>\r\n                    {row.map(cell => (\r\n                      <td>{cell}</td>\r\n                    ))}\r\n                  </tr>\r\n                ))}*/"]},"metadata":{},"sourceType":"module"}