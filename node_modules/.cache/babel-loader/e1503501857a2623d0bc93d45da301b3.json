{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Hin Wai\\\\my-app\\\\src\\\\components\\\\crypto_list.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from 'react';\nimport axios from 'axios';\nimport { COLUMNS } from './columns';\nimport './table.css';\nimport { useTable } from 'react-table';\nexport const CryptoList = () => {\n  _s();\n\n  getData = () => {\n    axios.get('http://localhost:5000/crypto/').then(response => {\n      const myResult = response.data;\n    }).catch(error => {\n      console.log(error);\n    });\n  }; //test2.then(function(result){\n  //  console.log(result);\n  //  return result;\n  //})\n\n\n  const Cryptodata = getData; //const listItems = Cryptodata.map((d) => <li key={d.name}>{d.name}</li>);\n  //const result = Object.assign({}, Cryptodata);\n  //console.log(result);\n  //console.log(Array.isArray(Cryptodata));\n\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => myResult, []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data: data\n  });\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          children: column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps,\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 40\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CryptoList, \"TY1hYDBNy72nyKDWeT5eueXAtPc=\", false, function () {\n  return [useTable];\n});\n\n_c = CryptoList;\nexport default CryptoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoList\");","map":{"version":3,"sources":["C:/Users/Hin Wai/my-app/src/components/crypto_list.component.js"],"names":["React","useMemo","axios","COLUMNS","useTable","CryptoList","getData","get","then","response","myResult","data","catch","error","console","log","Cryptodata","columns","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,OAAO,aAAP;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAK;AAAA;;AAE7BC,EAAAA,OAAO,GAAC,MAAI;AACVJ,IAAAA,KAAK,CAACK,GAAN,CAAU,+BAAV,EACCC,IADD,CACOC,QAAD,IAAc;AACpB,YAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAA1B;AACC,KAHD,EAICC,KAJD,CAIQC,KAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAND;AAOD,GARD,CAF6B,CAY7B;AACA;AACA;AACA;;;AAEA,QAAMG,UAAU,GAAGV,OAAnB,CAjB6B,CAkB7B;AACA;AACA;AACA;;AACA,QAAMW,OAAO,GAAGhB,OAAO,CAAC,MAAKE,OAAN,EAAe,EAAf,CAAvB;AACA,QAAMQ,IAAI,GAAGV,OAAO,CAAC,MAAKS,QAAN,EAAgB,EAAhB,CAApB;AACA,QAAM;AACFQ,IAAAA,aADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,IAJE;AAKFC,IAAAA;AALE,MAMFlB,QAAQ,CAAC;AACXa,IAAAA,OADW;AAEXN,IAAAA,IAAI,EAACA;AAFM,GAAD,CANZ;AAWA,sBACE,sBAAWO,aAAX;AAAA,4BACQ;AAAA,gBACKE,YAAY,CAACG,GAAb,CAAkBC,WAAD,iBACd,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBACKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD,iBACrB,mBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA,oBACKD,MAAM,CAACE,MAAP,CAAc,QAAd;AADL;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YADR,eAaQ,sBAAWV,iBAAX;AAAA,gBACKE,IAAI,CAACE,GAAL,CAAUO,GAAD,IAAQ;AACdR,QAAAA,UAAU,CAACQ,GAAD,CAAV;AACA,4BACI,mBAAQA,GAAG,CAACC,WAAJ,EAAR;AAAA,oBACKD,GAAG,CAACE,KAAJ,CAAUT,GAAV,CAAeU,IAAD,IAAQ;AACnB,gCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,wBACFD,IAAI,CAACJ,MAAL,CAAY,MAAZ;AADE;AAAA;AAAA;AAAA;AAAA,oBAAP;AAGH,WAJA;AADL;AAAA;AAAA;AAAA;AAAA,gBADJ;AASH,OAXA;AADL;AAAA;AAAA;AAAA;AAAA,YAbR;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAlEM;;GAAMxB,U;UA8BPD,Q;;;KA9BOC,U;AAqEb,eAAeA,UAAf","sourcesContent":["import React, { useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport {COLUMNS} from './columns';\r\nimport './table.css';\r\nimport {useTable} from 'react-table';\r\n\r\nexport const CryptoList = () =>{\r\n\r\n  getData=()=>{\r\n    axios.get('http://localhost:5000/crypto/')\r\n    .then((response) => {\r\n    const myResult = response.data;\r\n    })\r\n    .catch((error)=>{\r\n      console.log(error);\r\n    });\r\n  }\r\n  \r\n  //test2.then(function(result){\r\n  //  console.log(result);\r\n  //  return result;\r\n  //})\r\n\r\n  const Cryptodata = getData;\r\n  //const listItems = Cryptodata.map((d) => <li key={d.name}>{d.name}</li>);\r\n  //const result = Object.assign({}, Cryptodata);\r\n  //console.log(result);\r\n  //console.log(Array.isArray(Cryptodata));\r\n  const columns = useMemo(()=> COLUMNS, []);\r\n  const data = useMemo(()=> myResult, []);\r\n  const {\r\n      getTableProps, \r\n      getTableBodyProps, \r\n      headerGroups, \r\n      rows, \r\n      prepareRow\r\n  } = useTable({\r\n    columns, \r\n    data:data\r\n  });\r\n\r\n  return(\r\n    <table {...getTableProps}>\r\n            <thead>\r\n                {headerGroups.map((headerGroup)=>(\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column)=>(\r\n                            <th {...column.getHeaderProps()}>\r\n                                {column.render('Header')}\r\n                            </th>\r\n                    ))} \r\n                    </tr>\r\n                ))}\r\n                \r\n            </thead>\r\n            <tbody {...getTableBodyProps}>\r\n                {rows.map((row) =>{\r\n                    prepareRow(row)\r\n                    return(\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map((cell)=>{\r\n                                return <td {...cell.getCellProps()}>\r\n                                    {cell.render('Cell')}\r\n                                </td>\r\n                            })}\r\n                        </tr>\r\n                    )\r\n                })} \r\n            </tbody>\r\n        </table>\r\n\r\n  )\r\n}\r\n\r\n  \r\nexport default CryptoList;"]},"metadata":{},"sourceType":"module"}