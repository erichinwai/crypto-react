{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Hin Wai\\\\my-app\\\\src\\\\components\\\\crypto_table.component.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Cryptotable from './cryptotable';\nimport { useTable } from 'react-table';\nimport './table.css';\nexport const CryptoList = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const useSortedData = (items, config = null) => {\n    _s();\n\n    const [sortConfig, setSortConfig] = React.useState(config);\n    const sortedItems = React.useMemo(() => {\n      let sortableItems = [...items];\n\n      if (sortConfig !== null) {\n        sortableItems.sort((a, b) => {\n          if (a[sortConfig.key] < b[sortConfig.key]) {\n            return sortConfig.direction === 'ascending' ? -1 : 1;\n          }\n\n          if (a[sortConfig.key] > b[sortConfig.key]) {\n            return sortConfig.direction === 'ascending' ? 1 : -1;\n          }\n\n          return 0;\n        });\n      }\n\n      return sortableItems;\n      console.log(sortableItems);\n    }, [items, sortConfig]);\n\n    const requestSort = key => {\n      let direction = 'ascending';\n\n      if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n        direction = 'descending';\n      }\n\n      setSortConfig({\n        key,\n        direction\n      });\n    };\n\n    console.log({\n      items: sortedItems,\n      requestSort,\n      sortConfig\n    });\n    return {\n      items: sortedItems,\n      requestSort,\n      sortConfig\n    };\n  };\n\n  _s(useSortedData, \"RK+7Z8/M5Gu9u9DrSbX+5MpLDnQ=\");\n\n  const getData = () => {\n    return axios.get('http://localhost:5000/crypto/').then(response => {\n      response.data;\n      console.log(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  console.log(JSON.stringify(getData()));\n  const {\n    items,\n    requestSort,\n    sortConfig\n  } = useSortableData(getData());\n\n  const getClassNamesFor = name => {\n    if (!sortConfig) {\n      return;\n    }\n\n    return sortConfig.key === name ? sortConfig.direction : undefined;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Crypto Currency Historial\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"thead-light\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Currency'),\n              className: getClassNamesFor('Currency'),\n              children: \"Currency\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Date'),\n              className: getClassNamesFor('Date'),\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Open'),\n              className: getClassNamesFor('Open'),\n              children: \"Open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('High'),\n              className: getClassNamesFor('High'),\n              children: \"High\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Low'),\n              className: getClassNamesFor('Low'),\n              children: \"Low\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort('Volume'),\n              className: getClassNamesFor('Volume'),\n              children: \"Volume\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => requestSort(['Market Cap']),\n              className: getClassNamesFor(['Market Cap']),\n              children: \"Market Cap\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Currency\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Open\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.High\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Low\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Close\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.Volume\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item['Market Cap']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 21\n          }, this)]\n        }, item._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s2(CryptoList, \"PSo/US/k7oxWT26DPU+y7juhpag=\", true);\n\n_c = CryptoList;\nexport default CryptoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoList\");","map":{"version":3,"sources":["C:/Users/Hin Wai/my-app/src/components/crypto_table.component.js"],"names":["React","Component","axios","Cryptotable","useTable","CryptoList","useSortedData","items","config","sortConfig","setSortConfig","useState","sortedItems","useMemo","sortableItems","sort","a","b","key","direction","console","log","requestSort","getData","get","then","response","data","catch","error","JSON","stringify","useSortableData","getClassNamesFor","name","undefined","map","item","Currency","Date","Open","High","Low","Close","Volume","_id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Cryptotable from './cryptotable';\r\nimport { useTable } from 'react-table';\r\nimport './table.css'\r\n\r\nexport const CryptoList =()=>{\r\n\r\n    const useSortedData= (items, config=null)=>{\r\n        const [sortConfig, setSortConfig] = React.useState(config);\r\n        const sortedItems = React.useMemo(() => {\r\n            let sortableItems = [...items];\r\n            if (sortConfig !== null) {\r\n                sortableItems.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                  return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                  return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                return 0;\r\n              });\r\n            }\r\n            return sortableItems;\r\n            console.log(sortableItems);\r\n        }, [items, sortConfig]);\r\n\r\n        const requestSort = (key) => {\r\n            let direction = 'ascending';\r\n            if (\r\n              sortConfig &&\r\n              sortConfig.key === key &&\r\n              sortConfig.direction === 'ascending'\r\n            ) {\r\n              direction = 'descending';\r\n            }\r\n            setSortConfig({ key, direction });\r\n        };\r\n        \r\n        console.log({ items: sortedItems, requestSort, sortConfig });\r\n        return { items: sortedItems, requestSort, sortConfig };\r\n    }\r\n    \r\n    \r\n    const getData=()=>{\r\n        return axios.get('http://localhost:5000/crypto/')\r\n            .then((response) => {\r\n                (response.data)\r\n                console.log(response.data)\r\n            })\r\n            .catch((error)=>{\r\n                console.log(error);\r\n            })\r\n    }\r\n    console.log(JSON.stringify(getData()));\r\n    const { items, requestSort, sortConfig } = useSortableData(getData());\r\n    const getClassNamesFor = (name) => {\r\n        if (!sortConfig) {\r\n            return;\r\n        }\r\n        return sortConfig.key === name ? sortConfig.direction : undefined;\r\n    };\r\n    return(\r\n        <div>\r\n            <h2>Crypto Currency Historial</h2>\r\n            <table className=\"table\">\r\n                <thead className=\"thead-light\">\r\n                    <tr>\r\n                        <th>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => requestSort('Currency')}\r\n                                className={getClassNamesFor('Currency')}\r\n                            >Currency</button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => requestSort('Date')}\r\n                                className={getClassNamesFor('Date')}\r\n                            >Date</button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => requestSort('Open')}\r\n                                className={getClassNamesFor('Open')}\r\n                            >Open</button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => requestSort('High')}\r\n                                className={getClassNamesFor('High')}\r\n                            >High</button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => requestSort('Low')}\r\n                                className={getClassNamesFor('Low')}\r\n                            >Low</button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => requestSort('Volume')}\r\n                                className={getClassNamesFor('Volume')}\r\n                            >Volume</button>\r\n                        </th>\r\n                        <th>\r\n                            <button\r\n                                type=\"button\"\r\n                                onClick={() => requestSort(['Market Cap'])}\r\n                                className={getClassNamesFor(['Market Cap'])}\r\n                            >Market Cap</button>\r\n                        </th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {items.map((item) => (\r\n                    <tr key={item._id}>\r\n                    <td>{item.Currency}</td>\r\n                    <td>{item.Date}</td>\r\n                    <td>{item.Open}</td>\r\n                    <td>{item.High}</td>\r\n                    <td>{item.Low}</td>\r\n                    <td>{item.Close}</td>\r\n                    <td>{item.Volume}</td>\r\n                    <td>{item['Market Cap']}</td>\r\n                    </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\nexport default CryptoList;"]},"metadata":{},"sourceType":"module"}