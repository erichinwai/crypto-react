{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Hin Wai\\\\my-app\\\\src\\\\components\\\\crypto_table.component.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport Cryptotable from './cryptotable';\nimport { useTable } from 'react-table';\nimport './table.css';\n\nclass CryptoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cryptos: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/crypto/').then(response => {\n      this.setState({\n        cryptos: response.data\n      });\n      console.log(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  sortedData(items, config = null) {\n    const [sortConfig, setSortConfig] = React.useState(config);\n    const sortedItems = React.useMemo(() => {\n      let sortableItems = [...items];\n\n      if (sortConfig !== null) {\n        sortableItems.sort((a, b) => {\n          if (a[sortConfig.key] < b[sortConfig.key]) {\n            return sortConfig.direction === 'ascending' ? -1 : 1;\n          }\n\n          if (a[sortConfig.key] > b[sortConfig.key]) {\n            return sortConfig.direction === 'ascending' ? 1 : -1;\n          }\n\n          return 0;\n        });\n      }\n\n      return sortableItems;\n      console.log(sortableItems);\n    }, [items, sortConfig]);\n\n    const requestSort = key => {\n      let direction = 'ascending';\n\n      if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n        direction = 'descending';\n      }\n\n      setSortConfig({\n        key,\n        direction\n      });\n    };\n\n    console.log({\n      items: sortedItems,\n      requestSort,\n      sortConfig\n    });\n    return {\n      items: sortedItems,\n      requestSort,\n      sortConfig\n    };\n  }\n\n  cryptoList() {\n    return this.state.cryptos.map(currentcrypto => {\n      return /*#__PURE__*/_jsxDEV(Cryptotable, {\n        crypto: currentcrypto\n      }, currentcrypto._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 20\n      }, this);\n    });\n  }\n\n  render() {\n    const {\n      items,\n      requestSort,\n      sortConfig\n    } = useSortableData(this.state.cryptos);\n\n    const getClassNamesFor = name => {\n      if (!sortConfig) {\n        return;\n      }\n\n      return sortConfig.key === name ? sortConfig.direction : undefined;\n    };\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Crypto Currency Historial\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"thead-light\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => requestSort('Currency'),\n                className: getClassNamesFor('Currency'),\n                children: \"Currency\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => requestSort('Date'),\n                className: getClassNamesFor('Date'),\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => requestSort('Open'),\n                className: getClassNamesFor('Open'),\n                children: \"Open\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => requestSort('High'),\n                className: getClassNamesFor('High'),\n                children: \"High\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => requestSort('Low'),\n                className: getClassNamesFor('Low'),\n                children: \"Low\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => requestSort('Volume'),\n                className: getClassNamesFor('Volume'),\n                children: \"Volume\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"button\",\n                onClick: () => requestSort(['Market Cap']),\n                className: getClassNamesFor(['Market Cap']),\n                children: \"Market Cap\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: items.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Currency\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Open\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.High\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Low\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Close\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.Volume\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item['Market Cap']\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 25\n            }, this)]\n          }, item._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default CryptoList;","map":{"version":3,"sources":["C:/Users/Hin Wai/my-app/src/components/crypto_table.component.js"],"names":["React","Component","axios","Cryptotable","useTable","CryptoList","constructor","props","state","cryptos","componentDidMount","get","then","response","setState","data","console","log","catch","error","sortedData","items","config","sortConfig","setSortConfig","useState","sortedItems","useMemo","sortableItems","sort","a","b","key","direction","requestSort","cryptoList","map","currentcrypto","_id","render","useSortableData","getClassNamesFor","name","undefined","item","Currency","Date","Open","High","Low","Close","Volume"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Cryptotable from './cryptotable';\r\nimport { useTable } from 'react-table';\r\nimport './table.css'\r\n\r\nclass CryptoList extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {cryptos: []};\r\n    }\r\n    \r\n    componentDidMount(){\r\n        axios.get('http://localhost:5000/crypto/')\r\n        .then(response =>{\r\n            this.setState({ cryptos: response.data})\r\n            console.log(response.data)\r\n\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error);\r\n        })\r\n    }\r\n\r\n    sortedData(items, config=null){\r\n        const [sortConfig, setSortConfig] = React.useState(config);\r\n        const sortedItems = React.useMemo(() => {\r\n            let sortableItems = [...items];\r\n            if (sortConfig !== null) {\r\n                sortableItems.sort((a, b) => {\r\n                if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                  return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                }\r\n                if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                  return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                }\r\n                return 0;\r\n              });\r\n            }\r\n            return sortableItems;\r\n            console.log(sortableItems);\r\n        }, [items, sortConfig]);\r\n\r\n        const requestSort = (key) => {\r\n            let direction = 'ascending';\r\n            if (\r\n              sortConfig &&\r\n              sortConfig.key === key &&\r\n              sortConfig.direction === 'ascending'\r\n            ) {\r\n              direction = 'descending';\r\n            }\r\n            setSortConfig({ key, direction });\r\n        };\r\n        \r\n        console.log({ items: sortedItems, requestSort, sortConfig });\r\n        return { items: sortedItems, requestSort, sortConfig };\r\n    }\r\n    \r\n    cryptoList(){\r\n        return this.state.cryptos.map(currentcrypto =>{\r\n            return <Cryptotable crypto={currentcrypto} key={currentcrypto._id}/>;\r\n        })\r\n    }\r\n\r\n    render(){\r\n        const { items, requestSort, sortConfig } = useSortableData(this.state.cryptos);\r\n        const getClassNamesFor = (name) => {\r\n            if (!sortConfig) {\r\n                return;\r\n            }\r\n            return sortConfig.key === name ? sortConfig.direction : undefined;\r\n        };\r\n        return(\r\n            <div>\r\n                <h2>Crypto Currency Historial</h2>\r\n                <table className=\"table\">\r\n                    <thead className=\"thead-light\">\r\n                        <tr>\r\n                            <th>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => requestSort('Currency')}\r\n                                    className={getClassNamesFor('Currency')}\r\n                                >Currency</button>\r\n                            </th>\r\n                            <th>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => requestSort('Date')}\r\n                                    className={getClassNamesFor('Date')}\r\n                                >Date</button>\r\n                            </th>\r\n                            <th>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => requestSort('Open')}\r\n                                    className={getClassNamesFor('Open')}\r\n                                >Open</button>\r\n                            </th>\r\n                            <th>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => requestSort('High')}\r\n                                    className={getClassNamesFor('High')}\r\n                                >High</button>\r\n                            </th>\r\n                            <th>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => requestSort('Low')}\r\n                                    className={getClassNamesFor('Low')}\r\n                                >Low</button>\r\n                            </th>\r\n                            <th>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => requestSort('Volume')}\r\n                                    className={getClassNamesFor('Volume')}\r\n                                >Volume</button>\r\n                            </th>\r\n                            <th>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={() => requestSort(['Market Cap'])}\r\n                                    className={getClassNamesFor(['Market Cap'])}\r\n                                >Market Cap</button>\r\n                            </th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {items.map((item) => (\r\n                        <tr key={item._id}>\r\n                        <td>{item.Currency}</td>\r\n                        <td>{item.Date}</td>\r\n                        <td>{item.Open}</td>\r\n                        <td>{item.High}</td>\r\n                        <td>{item.Low}</td>\r\n                        <td>{item.Close}</td>\r\n                        <td>{item.Volume}</td>\r\n                        <td>{item['Market Cap']}</td>\r\n                        </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CryptoList;"]},"metadata":{},"sourceType":"module"}