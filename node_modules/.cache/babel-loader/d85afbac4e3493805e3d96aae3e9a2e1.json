{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Hin Wai\\\\my-app\\\\src\\\\components\\\\crypto_list.component.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useMemo } from 'react';\nimport axios from 'axios';\nimport Cryptotable from './cryptotable';\nimport { useTable } from 'react-table';\nimport { COLUMNS } from './columns';\nimport './table.css';\n\nfunction getData() {\n  axios.get('http://localhost:5000/crypto/').then(response => {\n    this.setState({\n      cryptos: response.data\n    });\n    console.log(response.data);\n  }).catch(error => {\n    console.log(error);\n  });\n}\n\nexport const CryptoTable = () => {\n  _s();\n\n  getData();\n  const columns = useMemo(() => COLUMNS, []);\n  const data = useMemo(() => this.state.cryptos, []);\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps,\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n          children: column.render('Header')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps,\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 40\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CryptoTable, \"pjBIPaRCpDJjOFbWNcaYNCnHqio=\", false, function () {\n  return [useTable];\n});\n\n_c = CryptoTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoTable\");","map":{"version":3,"sources":["C:/Users/Hin Wai/my-app/src/components/crypto_list.component.js"],"names":["React","Component","useMemo","axios","Cryptotable","useTable","COLUMNS","getData","get","then","response","setState","cryptos","data","console","log","catch","error","CryptoTable","columns","state","tableInstance","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,OAA1B,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,OAAO,aAAP;;AAEA,SAASC,OAAT,GAAkB;AACdJ,EAAAA,KAAK,CAACK,GAAN,CAAU,+BAAV,EACKC,IADL,CACUC,QAAQ,IAAG;AACb,SAAKC,QAAL,CAAc;AAAEC,MAAAA,OAAO,EAAEF,QAAQ,CAACG;AAApB,KAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACG,IAArB;AAEH,GALL,EAMKG,KANL,CAMYC,KAAD,IAAS;AACZH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACH,GARL;AASH;;AACD,OAAO,MAAMC,WAAW,GAAE,MAAK;AAAA;;AAC3BX,EAAAA,OAAO;AACP,QAAMY,OAAO,GAAGjB,OAAO,CAAC,MAAKI,OAAN,EAAe,EAAf,CAAvB;AACA,QAAMO,IAAI,GAAGX,OAAO,CAAC,MAAK,KAAKkB,KAAL,CAAWR,OAAjB,EAA0B,EAA1B,CAApB;AACA,QAAMS,aAAa,GAAGhB,QAAQ,CAAC;AAC3Bc,IAAAA,OAD2B;AAE3BN,IAAAA;AAF2B,GAAD,CAA9B;AAKA,QAAM;AACFS,IAAAA,aADE;AAEFC,IAAAA,iBAFE;AAGFC,IAAAA,YAHE;AAIFC,IAAAA,IAJE;AAKFC,IAAAA;AALE,MAMFL,aANJ;AAQA,sBACI,sBAAWC,aAAX;AAAA,4BACI;AAAA,gBACKE,YAAY,CAACG,GAAb,CAAkBC,WAAD,iBACd,mBAAQA,WAAW,CAACC,mBAAZ,EAAR;AAAA,kBACKD,WAAW,CAACE,OAAZ,CAAoBH,GAApB,CAAyBI,MAAD,iBACrB,mBAAQA,MAAM,CAACC,cAAP,EAAR;AAAA,oBACKD,MAAM,CAACE,MAAP,CAAc,QAAd;AADL;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAaI,sBAAWV,iBAAX;AAAA,gBACKE,IAAI,CAACE,GAAL,CAAUO,GAAD,IAAQ;AACdR,QAAAA,UAAU,CAACQ,GAAD,CAAV;AACA,4BACI,mBAAQA,GAAG,CAACC,WAAJ,EAAR;AAAA,oBACKD,GAAG,CAACE,KAAJ,CAAUT,GAAV,CAAeU,IAAD,IAAQ;AACnB,gCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,wBACFD,IAAI,CAACJ,MAAL,CAAY,MAAZ;AADE;AAAA;AAAA;AAAA;AAAA,oBAAP;AAGH,WAJA;AADL;AAAA;AAAA;AAAA;AAAA,gBADJ;AAUH,OAZA;AADL;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCH,CAjDM;;GAAMf,W;UAIab,Q;;;KAJba,W","sourcesContent":["import React, {Component, useMemo} from 'react';\r\nimport axios from 'axios';\r\nimport Cryptotable from './cryptotable';\r\nimport {useTable} from 'react-table'\r\nimport {COLUMNS} from './columns'\r\nimport './table.css'\r\n\r\nfunction getData(){\r\n    axios.get('http://localhost:5000/crypto/')\r\n        .then(response =>{\r\n            this.setState({ cryptos: response.data})\r\n            console.log(response.data)\r\n\r\n        })\r\n        .catch((error)=>{\r\n            console.log(error);\r\n        })\r\n}\r\nexport const CryptoTable =() =>{    \r\n    getData();\r\n    const columns = useMemo(()=> COLUMNS, [])\r\n    const data = useMemo(()=> this.state.cryptos, [])\r\n    const tableInstance = useTable({\r\n        columns, \r\n        data\r\n    })\r\n\r\n    const {\r\n        getTableProps, \r\n        getTableBodyProps, \r\n        headerGroups, \r\n        rows, \r\n        prepareRow\r\n    } = tableInstance\r\n\r\n    return(\r\n        <table {...getTableProps}>\r\n            <thead>\r\n                {headerGroups.map((headerGroup)=>(\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map((column)=>(\r\n                            <th {...column.getHeaderProps()}>\r\n                                {column.render('Header')}\r\n                            </th>\r\n                    ))} \r\n                    </tr>\r\n                ))}\r\n                \r\n            </thead>\r\n            <tbody {...getTableBodyProps}>\r\n                {rows.map((row) =>{\r\n                    prepareRow(row)\r\n                    return(\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map((cell)=>{\r\n                                return <td {...cell.getCellProps()}>\r\n                                    {cell.render('Cell')}\r\n                                </td>\r\n                            })}\r\n                        </tr>\r\n\r\n                    )\r\n                })} \r\n            </tbody>\r\n        </table>\r\n    )\r\n\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}